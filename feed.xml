<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Quiet Project</title>
    <description>Transmit data with sound. Quiet Project offers the ability to build native binaries that work with your soundcard and a JS implementation that uses Web Audio
</description>
    <link>https://quiet.github.io/</link>
    <atom:link href="https://quiet.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Wed, 30 Mar 2016 09:41:18 -0700</pubDate>
    <lastBuildDate>Wed, 30 Mar 2016 09:41:18 -0700</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Quiet Profile Lab — Build a Modem, Learn Some DSP</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/quiet/quiet-js&quot;&gt;Quiet.js&lt;/a&gt; and &lt;a href=&quot;https://github.com/quiet/quiet&quot;&gt;libquiet&lt;/a&gt; are capable of transmission via audible tones, ultrasonic tones, and through an audio cable at wide spectrum. Quiet provides a JSON file which provides parameters for each of these modes. A single set of parameters, a profile, sets the center frequency of the modem, the modulation, error correction modes used, and more. Creating a new profile in a way that’s robust to hardware limitations and yet provides good throughput can be difficult, which is why I’m now pleased to announce the &lt;a href=&quot;https://quiet.github.io/quiet-js/lab.html&quot;&gt;Quiet Profile Lab&lt;/a&gt;, a fully interactive workbench for creating and testing new profiles.&lt;/p&gt;

&lt;figure class=&quot;figure&quot;&gt;
&lt;img src=&quot;/images/qpl.png&quot; class=&quot;figure-img img-fluid img-rounded&quot; alt=&quot;Quiet Profile Lab in action&quot; /&gt;
  &lt;figcaption class=&quot;figure-caption&quot;&gt;Quiet Profile Lab in action&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The &lt;a href=&quot;https://quiet.github.io/quiet-js/lab.html&quot;&gt;Quiet Profile Lab&lt;/a&gt; makes it easy to test out new ideas for profiles. It offers spectrum and constellation diagrams in real time, as well as statistics about throughput, performance, and error rate. This makes it suitable not only for creating new profiles but also learning about modem design. If you’re working from a laptop, you have the perfect testbench – the laptop’s mic will likely pick up the audio generated by its own speakers.&lt;/p&gt;

&lt;p&gt;If you are unfamiliar with the techniques used by modems, I welcome you to try out the Lab and experiment with different settings. Because it’s interactive, the Lab is a great way to examine the behavior of various modulation modes. While Wikipedia offers good explanations for many DSP terms, it can be beneficial to see them working in a live example. Even if many of the terms in the Lab are unfamiliar, you may be able to figure out what they do, just by experimenting with them.&lt;/p&gt;

&lt;p&gt;If you’re not sure where to start, here are some ideas. Try changing the center frequency. Do you notice changes in how the modem sounds? Reduce the gain and see how quiet you can get the modem while still receiving frames. Increase the interpolation factor (samples per symbol) to narrow the part of the frequency spectrum that your modem uses. Can you find a high frequency, narrow spectrum setting that transfers data but which you can’t hear?&lt;/p&gt;

&lt;p&gt;If you have the cable on hand, I highly recommend creating a loopback setup to test on, as well. Passing the audio over a cable greatly reduces noise and will allow you to pass a more delicate, higher throughput signal and will preserve the constellation more than using speakers/mic will. The Lab includes some presets to get you started in cable mode.&lt;/p&gt;

&lt;p&gt;Once you’re done, have a look at some of the standards used by the devices you own, like &lt;a href=&quot;http://electronicdesign.com/4g/introduction-lte-advanced-real-4g#%E2%80%9DFrequency%E2%80%9D&quot;&gt;4g LTE&lt;/a&gt; or &lt;a href=&quot;https://en.wikipedia.org/wiki/Orthogonal_frequency-division_multiplexing#OFDM_system_comparison_table&quot;&gt;802.11a&lt;/a&gt;. The Lab provides a good way to get familiar with some of the techniques used in common radios, which are remarkably similar despite being carried by electromagnetic waves rather than by sound.&lt;/p&gt;

&lt;p&gt;If you find a profile that you’d like to start using with &lt;a href=&quot;https://github.com/quiet/quiet-js&quot;&gt;Quiet.js&lt;/a&gt;, the Lab provides you with the properly formatted JSON text for the profile you’ve created. It’s as simple as copying the text and pasting it into quiet-profiles.json under a new key.&lt;/p&gt;

&lt;p&gt;If you’ve always wanted to learn about DSP but have not had the chance, I hope you’ll spend some time in the &lt;a href=&quot;https://quiet.github.io/quiet-js/lab.html&quot;&gt;Lab&lt;/a&gt;. I think you’ll really like it.&lt;/p&gt;

</description>
        <pubDate>Wed, 30 Mar 2016 09:30:20 -0700</pubDate>
        <link>https://quiet.github.io/quiet-blog/2016/03/30/quiet-profile-lab.html</link>
        <guid isPermaLink="true">https://quiet.github.io/quiet-blog/2016/03/30/quiet-profile-lab.html</guid>
        
        
        <category>quiet-blog</category>
        
      </item>
    
      <item>
        <title>Quiet</title>
        <description>&lt;p&gt;When I started working on &lt;a href=&quot;https://github.com/quiet/quiet&quot;&gt;libquiet&lt;/a&gt;, I was trying to answer a question for myself. I had seen projects which passed data through the headphone jack, which I thought was an interesting idea. I wanted to know how fast this method could send data. Many of these methods used Frequency-Shift Keying, which is easy to implement but typically does not achieve the maximum speed possible. I started researching, which lead me to &lt;a href=&quot;http://liquidsdr.org/&quot;&gt;liquid sdr&lt;/a&gt; which offers basic framing and all the modulation and error correction methods I would need to answer my question. And so, libquiet was born, creating a configurable modem engine which connects soundcard to liquid SDR.&lt;/p&gt;

&lt;p&gt;As the project continued, I realized it would also be possible to compile my library to JS using emscripten. I was surprised how well this works, and now, Quiet.js is compatible with the native binaries create with libquiet. My aim is to bring quiet to as many platforms as possible. It’s not just for your headphone jack, either. Quiet works quite well through your speakers.&lt;/p&gt;

&lt;p&gt;There’s a few reasons I chose the name quiet. For one, I was thinking about using the headphone jack, which wouldn’t emit any sound. As the project expanded, I realized that ultrasonic transmission would also be possible – another type of quiet modem. Additionally, the quiet modem uses SDR, but it’s “quiet” in the RF spectrum (mostly!). And finally, the best reason, because modems don’t work when they’re clipping! Turn down your volume before using quiet.&lt;/p&gt;

</description>
        <pubDate>Tue, 29 Mar 2016 11:30:45 -0700</pubDate>
        <link>https://quiet.github.io/quiet-blog/2016/03/29/quiet.html</link>
        <guid isPermaLink="true">https://quiet.github.io/quiet-blog/2016/03/29/quiet.html</guid>
        
        
        <category>quiet-blog</category>
        
      </item>
    
  </channel>
</rss>
